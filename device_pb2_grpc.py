# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import device_pb2 as device__pb2


class DeviceServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDeviceById = channel.unary_unary(
                '/device.DeviceService/GetDeviceById',
                request_serializer=device__pb2.GetDeviceByIdRequest.SerializeToString,
                response_deserializer=device__pb2.Device.FromString,
                )
        self.GetAllDevices = channel.unary_unary(
                '/device.DeviceService/GetAllDevices',
                request_serializer=device__pb2.GetAllDevicesRequest.SerializeToString,
                response_deserializer=device__pb2.AllDevicesResponse.FromString,
                )
        self.AddDevice = channel.unary_unary(
                '/device.DeviceService/AddDevice',
                request_serializer=device__pb2.AddDeviceRequest.SerializeToString,
                response_deserializer=device__pb2.Device.FromString,
                )
        self.UpdateDevice = channel.unary_unary(
                '/device.DeviceService/UpdateDevice',
                request_serializer=device__pb2.UpdateDeviceRequest.SerializeToString,
                response_deserializer=device__pb2.Device.FromString,
                )
        self.DeleteDevice = channel.unary_unary(
                '/device.DeviceService/DeleteDevice',
                request_serializer=device__pb2.DeleteDeviceRequest.SerializeToString,
                response_deserializer=device__pb2.DeleteDeviceResponse.FromString,
                )


class DeviceServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetDeviceById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllDevices(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddDevice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDevice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteDevice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DeviceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDeviceById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDeviceById,
                    request_deserializer=device__pb2.GetDeviceByIdRequest.FromString,
                    response_serializer=device__pb2.Device.SerializeToString,
            ),
            'GetAllDevices': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllDevices,
                    request_deserializer=device__pb2.GetAllDevicesRequest.FromString,
                    response_serializer=device__pb2.AllDevicesResponse.SerializeToString,
            ),
            'AddDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.AddDevice,
                    request_deserializer=device__pb2.AddDeviceRequest.FromString,
                    response_serializer=device__pb2.Device.SerializeToString,
            ),
            'UpdateDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDevice,
                    request_deserializer=device__pb2.UpdateDeviceRequest.FromString,
                    response_serializer=device__pb2.Device.SerializeToString,
            ),
            'DeleteDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteDevice,
                    request_deserializer=device__pb2.DeleteDeviceRequest.FromString,
                    response_serializer=device__pb2.DeleteDeviceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'device.DeviceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DeviceService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetDeviceById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/device.DeviceService/GetDeviceById',
            device__pb2.GetDeviceByIdRequest.SerializeToString,
            device__pb2.Device.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllDevices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/device.DeviceService/GetAllDevices',
            device__pb2.GetAllDevicesRequest.SerializeToString,
            device__pb2.AllDevicesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/device.DeviceService/AddDevice',
            device__pb2.AddDeviceRequest.SerializeToString,
            device__pb2.Device.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/device.DeviceService/UpdateDevice',
            device__pb2.UpdateDeviceRequest.SerializeToString,
            device__pb2.Device.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/device.DeviceService/DeleteDevice',
            device__pb2.DeleteDeviceRequest.SerializeToString,
            device__pb2.DeleteDeviceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
